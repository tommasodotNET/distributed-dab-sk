@page "/chat"
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.Plugins.OpenApi
@using Microsoft.SemanticKernel.Connectors.OpenAI
@using Microsoft.SemanticKernel.Plugins.OpenApi.Extensions
@using Microsoft.SemanticKernel.PromptTemplates.Handlebars
@rendermode InteractiveServer
@inject Kernel kernel
@inject IHttpClientFactory _httpClientFactory

<h3>Chat</h3>

<EditForm Model="model" OnValidSubmit="Search">
    <div class="mb-2">
        <label>Type in your query to ask a question about your data.</label>
    </div>
    <div class="input-group mb-2" style="padding-right: 25em;">
        <InputText class="input queryinput form-control"
                   @bind-Value="model.SearchString"
                   aria-label="type in your query"/>

        <button type="submit" class="btn btn-outline-primary button querybutton">Search</button>
    </div>
</EditForm>

<div>
    @if (Response != null)
    {
        @((MarkupString)Response)
    }
</div>

@if (IsVisible)
{
    <div class="spinner"></div>
}

@code {
    protected string? Response { get; set; }
    protected bool IsVisible { get; set; }
    private ViewModel model = new();

    protected override async Task OnInitializedAsync()
    {
        await kernel.ImportPluginFromOpenApiAsync(
            pluginName: "GQLPlugin",
            filePath: Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"Plugins/DAB_GraphQL/openapi.yml"),
            executionParameters: new OpenApiFunctionExecutionParameters()
            {
                ServerUrlOverride = new Uri(Environment.GetEnvironmentVariable("services__dab__http__0")!),
                EnableDynamicPayload = true,
                IgnoreNonCompliantErrors = true,
                EnablePayloadNamespacing = true,
            });
    }

    protected async Task Search()
    {
        await InvokeAsync(() =>
        {
            ShowSpinner();
        });

        var promptTemplate = PromptLoader.Load("agent_gql.yaml");

        var _settings = new OpenAIPromptExecutionSettings()
        {
            ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions,
            Temperature = 0.1,
            MaxTokens = 500,
            ResultsPerPrompt = 1,
        };

        var _promptFunction = kernel.CreateFunctionFromPromptYaml(promptTemplate, promptTemplateFactory: new HandlebarsPromptTemplateFactory());

        var kernelArgs = new KernelArguments(_settings)
        {
            ["query"] = model.SearchString
        };

        var cancellationToken = new System.Threading.CancellationToken();

        var promptResult = _promptFunction.InvokeStreamingAsync<string>(kernel, kernelArgs, cancellationToken);

        await foreach (var update in promptResult.WithCancellation(cancellationToken).ConfigureAwait(false))
        {
            if (string.IsNullOrEmpty(update)) { continue; }

            Response += update;
        }

        await InvokeAsync(() =>
        {
            HideSpinner();
        });
    }

    public void ShowSpinner()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void HideSpinner()
    {
        IsVisible = false;
        StateHasChanged();
    }

    class ViewModel
    {
        public string? SearchString { get; set; }
    }
}
